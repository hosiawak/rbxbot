namespace(atomy)

module(Atomy::Patterns):
  export:
    class(RuntimeClass < Pattern):
      initialize(@body, @name) := #ok

      construct(g) := do:
        get(g)
        @body construct(g)
        @body compile(g)
        g send(#name, 0)
        g send(#new, 2)

      (== b) :=
        b kind-of?(RuntimeClass) &&
          @body == b body &&
          @name == b name

      target(g) :=
        @body compile(g)

      matches?(g) := do:
        Atomy const-from-string(g, @name)
        g swap
        g kind-of

    class(Predicate < Pattern):
      initialize(@pattern, @test) := #ok

      construct(g) := do:
        get(g)
        @pattern construct(g)
        @test construct(g)
        g send(#new, 2)

      (== b) :=
        b kind-of?(Predicate) &&
          @pattern == b pattern &&
          @test == b test

      target(g) := @pattern target(g)

      matches?(g) := do:
        mismatch = g new-label
        done = g new-label

        g dup
        @pattern matches?(g)
        g gif(mismatch)

        `{ ~@test } bytecode(g)
        g send(#block, 0)
        g swap
        g send(#call-on-instance, 1)
        g goto(done)

        mismatch set!
        g pop
        g push-false

        done set!

      deconstruct(g, locals = Hash new) :=
        @pattern deconstruct(g, locals)

      local-names := @pattern local-names

      bindings := @pattern bindings

    class(With < Pattern):
      initialize(@pattern, @expression, @sub-pattern) := #ok

      construct(g) := do:
        get(g)
        @pattern construct(g)
        @expression construct(g)
        @sub-pattern construct(g)
        g send(#new, 3)

      (== b) :=
        b kind-of?(With) &&
          @pattern == b pattern &&
          @expression == b expression &&
          @sub-pattern == b pattern

      target(g) := @pattern target(g)

      matches?(g) := do:
        mismatch = g new-label
        done = g new-label

        g dup
        @pattern matches?(g)
        g gif(mismatch)

        `{ ~@expression } bytecode(g)
        g send(#block, 0)
        g swap
        g send(#call-on-instance, 1)
        @sub-pattern matches?(g)
        g dup
        g git(done)

        mismatch set!
        g pop
        g push-false

        done set!

      deconstruct(g, locals = Hash new) := do:
        g dup
        @pattern deconstruct(g, locals)

        `{ ~@expression } bytecode(g)
        g send(#block, 0)
        g swap
        g send(#call-on-instance, 1)
        @sub-pattern deconstruct(g, locals)

      local-names := @pattern local-names + @sub-pattern local-names

      bindings := @pattern bindings + @sub-pattern bindings

    class(And < Pattern):
      initialize(@a, @b) := #ok

      construct(g) := do:
        get(g)
        @a construct(g)
        @b construct(g)
        g send(#new, 2)

      (== b) :=
        b kind-of?(And) &&
          @a == b a &&
          @b == b b

      target(g) :=
        @a target(g)

      matches?(g) := do:
        mismatch = g new-label
        done = g new-label

        g dup
        @a matches?(g)
        g gif(mismatch)

        @b matches?(g)
        g dup
        g git(done)

        mismatch set!
        g pop
        g push-false

        done set!

      deconstruct(g, locals = Hash new) := do:
        g dup
        @a deconstruct(g, locals)
        @b deconstruct(g, locals)

      local-names := [@a local-names + @b local-names] uniq

    class(Or < Pattern):
      initialize(@a, @b) := #ok

      construct(g) := do:
        get(g)
        @a construct(g)
        @b construct(g)
        g send(#new, 2)

      (== b) :=
        b kind-of?(Or) &&
          @a == b a &&
          @b == b b

      target(g) :=
        @a target(g)

      matches?(g) := do:
        matched = g new-label
        done = g new-label

        g dup
        @a matches?(g)
        g git(matched)

        @b matches?(g)
        g dup
        g gif(done)

        matched set!
        g pop
        g push-true

        done set!

      deconstruct(g, locals = #[]) := do:
        b = g new-label
        done = g new-label

        g dup
        g dup
        @a matches?(g)
        g gif(b)

        @a deconstruct(g, locals)
        g pop
        g goto(done)

        b set!
        g pop
        @b deconstruct(g, locals)

        done set!

      local-names := [@a local-names + @b local-names] uniq


-- base patterns
module(Atomy::AST):
  export:
    Variable pattern :=
      Atomy::Patterns::Named new $:
        @name
        Atomy::Patterns::Any new

    Primitive pattern :=
      Atomy::Patterns::Match new(@value)

    List pattern :=
      Atomy::Patterns::List new $:
        @elements collect [e]: e to-pattern

    Constant pattern :=
      Atomy::Patterns::Constant new(self)

    ScopedConstant pattern :=
      Atomy::Patterns::Constant new(self)

    ToplevelConstant pattern :=
      Atomy::Patterns::Constant new(self)

    Quote pattern :=
      Atomy::Patterns::Quote new(@expression)

    Block pattern :=
      Atomy::Patterns::SingletonClass new(self)

    Particle pattern :=
      Atomy::Patterns::Particle new(@name to-sym)

    QuasiQuote pattern :=
      Atomy::Patterns::QuasiQuote new(self)

    Send pattern :=
      if(@block)
        then:
          Atomy::Patterns::Named new $:
            @method-name
            @block contents [0] to-pattern
        else:
          Atomy::Patterns::Attribute new $:
            @receiver
            @method-name
            @arguments

    String pattern :=
      Atomy::Patterns::Match new(@value)

    Node pattern :=
      raise("unknown pattern: " + self inspect)
