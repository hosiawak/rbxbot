namespace(atomy)

macro(#(l: List)):
  keys = []
  values = []

  l elements each [p]:
    p match:
      `(~k -> ~v) -> do:
        keys << k
        values << v

      Atomy::AST::Send -> do:
        while(p respond-to?(#block) && p block):
          keys << Atomy::AST::Particle new(p line, p method-name)
          values << p block contents first
          p =! p receiver

  Atomy::AST::Hash new(line, keys, values)

export:
  class(Atomy::AST::Hash < Atomy::AST::Node):
    children([#keys], [#values])
    generate

    bytecode(g) := do:
      pos(g)

      g push-cpath-top
      g find-const(#Hash)
      g push-int(@keys size)
      g send(#new-from-literal, 1)

      @keys each-with-index [n, i]:
        g dup
        n compile(g)
        @values [i] compile(g)
        g send("[]=" to-sym, 2)
        g pop
