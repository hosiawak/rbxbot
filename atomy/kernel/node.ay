namespace(atomy)

export:
  module(Atomy::AST):
    '_ pattern :=
      Atomy::Patterns::Any new

    `(~h . ~t) pattern :=
      Atomy::Patterns::HeadTail new(h to-pattern, t to-pattern)

    `(~p = ~d) pattern :=
      Atomy::Patterns::Default new(p to-pattern, d)

    `(? ~t) pattern :=
      Atomy::Patterns::Predicate new(Atomy::Patterns::Any new, t)

    `(~p ? ~t) pattern :=
      Atomy::Patterns::Predicate new(p to-pattern, t)

    `(~a & ~b) pattern :=
      Atomy::Patterns::And new(a to-pattern, b to-pattern)

    `(~a | ~b) pattern :=
      Atomy::Patterns::Or new(a to-pattern, b to-pattern)

    `(with(~e, ~y)) pattern :=
      Atomy::Patterns::With new(Atomy::Patterns::Any new, e, y to-pattern)

    `(~x with(~e, ~y)) pattern :=
      Atomy::Patterns::With new(x to-pattern, e, y to-pattern)

    `@@~n pattern :=
      Atomy::Patterns::NamedClass new(n name)

    `$~n pattern :=
      Atomy::Patterns::NamedGlobal new(n name)

    `@~n pattern :=
      Atomy::Patterns::NamedInstance new(n name)

    `%~x pattern :=
      Atomy::Patterns::RuntimeClass new(x, nil)

    `&~x pattern :=
      Atomy::Patterns::BlockPass new(x to-pattern)

    `*~x pattern :=
      Atomy::Patterns::Splat new(x to-pattern)

    `(Particle [~*as]) pattern :=
      Atomy::Patterns::List new(as collect [a]: a to-pattern)
